import { SimpleModulusDecryptor, SimpleModulusEncryptor, Xor32Decryptor } from "./index";

function Assert(r: boolean, str: string = '') {
  if (!r) {
    console.error(str);
  }
}

function CompareArrays(expected: Uint8Array, actual: Uint8Array): void {
  Assert(actual.length === expected.length, 'length');
  for (let i = 0; i < actual.length; i++) {
    Assert(actual[i] === expected[i], `index ${i}`);
  }
}

class Convert {
  static FromBase64String(base64: string): Uint8Array {
    const binaryString = atob(base64);
    const bytes = new Uint8Array(binaryString.length);
    for (let i = 0; i < binaryString.length; i++) {
      bytes[i] = binaryString.charCodeAt(i);
    }
    return bytes;
  }
}

export class EncTests {
  /// <summary>
  /// Tests the encryption of C3-packets with the <see cref="Encryptor"/>.
  /// </summary>
  C3Encrypt(): void {
    const packet = Convert.FromBase64String("w7kxFgK8hYpGGLgdXe7ZpTZViB+r3sRI3YSqZs7/Mh5Vmh2mXqs+3dqkvURmXrL57ASs+FkJz/236Tl9ER67R+WZyMLRMkeLF6tEBiB/4X7SsXrKUznES8of73RxwMy76HZezJbvJ7m9IOGuxcjcNwe6q1+k8fOs1Hz3sULSGlbfiB6qIBXo4onADTNYFoYCQrdtthVsF/aDsvcZ93V36gaKzzyqMhby0sjV4+TAU7719W6LZWNAcnA=");
    const expected = Convert.FromBase64String("w/+eRi3xwRp1LdEdKA9lEFFECgL0vYm8siQHloDxwRXsKx4SdRNuBxgl3W3N+OcgJy/dTaThrSAVUhV1XkPLtCklDzoX4gjPXGPjVEJIfb0iY+wGCIFSZnZDKvYIh8GIF7CNZlOLxigIGPESgPY2Ax6WBoTZaDexFePWS8Q1i0Phk5XkZ1LqTRG5gwwxvCZzRi04HVRMTleEnUN2IOIF79s2xr8BXWhsbTIUx30ychj0wdeeAz8D2DCFUUdyB6kWoMG/4V7Mu44JrgM3mfiD0py6j145biJC/BDr9Ii9AsEokQX15FptGi+9/C64i7EBH7QPOm69cdjeNFBQPpms");

    const encryptor = new SimpleModulusEncryptor();
    const result = encryptor.Encrypt(packet);

    CompareArrays(expected, result);
  }

  /// <summary>
  /// Tests the encryption of C4-packets with the <see cref="Encryptor"/>.
  /// </summary>
  C4Encrypt(): void {
    const packet = Convert.FromBase64String("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");
    const expected = Convert.FromBase64String("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");

    const encryptor = new SimpleModulusEncryptor();
    const result = encryptor.Encrypt(packet);

    CompareArrays(expected, result);
  }

  /// <summary>
  /// Tests the decryption of C4-packets with the <see cref="Decryptor"/>.
  /// </summary>
  C4Decrypt(): void {
    const decryptedPacket = Convert.FromBase64String("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");
    const encryptedPacket = Convert.FromBase64String("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");

    const decryptor = new SimpleModulusDecryptor();
    const xor32Decryptor = new Xor32Decryptor();
    let [success, r1] = decryptor.Decrypt(encryptedPacket);
    [success, r1] = xor32Decryptor.Decrypt(r1);

    Assert(success);
    CompareArrays(r1, decryptedPacket);
  }

  /// <summary>
  /// Tests the decryption of C3-packets with the <see cref="Decryptor"/>.
  /// </summary>
  C3Decrypt(): void {
    const decryptedPacket = Convert.FromBase64String("w7gAudHEjjSP53H6Rkp3oXj7B9z+rVDR2f0Is4bvsIsUL3RM/aTDB2FX9YG3Hkboy1Z1JThot558MeDTvNuunzfl5RbWK6TTOP97prjPGbq3IOcweopTq3fVz8vD8EuFqVVJ0jgvEZ+xoe047RHmrRgmG5zzfSWtkTmeAVzZD0i09f1jhUeBiA5HfticGr5m7iGzndSvkSwvm0D/kRBD15GlhPgTgyfQpJONrP5NEHd7NxI6JnJzBQ==");
    const encryptedPacket = Convert.FromBase64String("w/+r1UUAxjcz8wQKPyQ8IsrH0PAGfEF0+VwSJx3GwXzcOw42Oj7OVZIU/EXp3FMYZIbCGlPGNTwJuaEKkEHWoaiNtoM8NwWwhcPBmITN+C2nH48ZhNDtNQYzOOd3stxbIPwkuI1LmgohXa1iHnUUIdLeQ3+h1oURffLHjnkZcpyuECtoLRjgYjaayychmMDG8wVPVPKokNIrLIeyyFJGLMv0pgH8FyIX5mCJqOog/B26j44cU0eKyQK6geDV7f5xMxtlYL1gy/4ZcyLexoEAdeGSp5QmHLhCb8L99cD1UVIul9IQkU35AzYhRRtU7yjTjYlhVLjCMiIVnjQfJKac");

    const decryptor = new SimpleModulusDecryptor();
    const xor32Decryptor = new Xor32Decryptor();
    let [success, r1] = decryptor.Decrypt(encryptedPacket);
    [success, r1] = xor32Decryptor.Decrypt(r1);

    Assert(success === true);
    CompareArrays(r1, decryptedPacket);
  }
}

const tests = new EncTests();
tests.C3Encrypt();
tests.C4Encrypt();
tests.C3Decrypt();
tests.C4Decrypt();
